import re
from whois import whois
import datetime
from datetime import date
import mechanicalsoup

# Read the data
import io
tdf = pd.read_csv(io.BytesIO(uploaded['phishing_site_urls_random sample.csv']))
# Dataset is now stored in a Pandas Dataframe

df2 = tdf.loc[0:]

from sklearn.preprocessing import OneHotEncoder

#creating instance of one-hot-encoder
encoder = OneHotEncoder(handle_unknown='ignore')

#perform one-hot encoding on 'team' column 
encoder_df = pd.DataFrame(encoder.fit_transform(df2[['Label']]).toarray())

#merge one-hot encoded columns back with original DataFrame
df3 = df2.join(encoder_df)

df3 = df3.drop(['Label'], axis=1)
df3.columns = ['URL', 'Label_bad', 'Label_good']
df3 = df3.drop(['Label_good'], axis=1)

# function for extracting urls from email body 

def Find(content):
    regex = r"(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\".,<>?«»“”‘’]))"
    url = re.findall(regex, content)
    return [x[0] for x in url]

# defining functions for each of the phishing features
  
def phishtank_check(i):
  browser = mechanicalsoup.StatefulBrowser()
  browser.open("https://www.phishtank.com/")
  try:
    form = browser.select_form(selector='form', nr=1)
    browser["isaphishurl"] = i
    my_button = browser.get_current_page().find('input', value='Is it a phish?')
    response = browser.submit_selected(btnName = my_button)
    s1 = 'This site is not a phishing site.'
    s2 = 'Is a phish'
    if s1 in response.text:
      return 0
    elif s2 in response.text:
      return 1
    else:
      return 0.5
  except:
    return 0.7

def numOfDays(date1, date2):
    return (date2-date1).days

def domain_check(i):
    try: 
      W = whois(i)
      if type(W["creation_date"]) == list:
        S = str(W["creation_date"][0])
        s = S[0:10]
      else:
        s = str(W["creation_date"])
      year, month, day = int(s[0:10][0:4]), int(s[0:10][5:7]), int(s[0:10][8:10])
      date1 = date(year, month, day)
      date2 = date(2023, 2, 6)
      n = numOfDays(date1, date2)
      if n <= 150:
        return 1
      else:
        return 0
    except:
      return 1

def url_character_check(i):
  if '@' in i:
    return 1
  else:
    return 0

def ip_check(i):
  if 'www.' in i:
    p = i.index('www.')
    if type(i[p+4]) == int:
      return 1
    else:
      return 0
  else:
    return 0

def url_length(i):
  if len(i) > 100:   
    return 1
  else:
    return 0

def form_tag_check(i):
  browser = mechanicalsoup.StatefulBrowser()
  try:
    browser.open(i)
    form = browser.select_form()
    return 0
  except:
    return 1

def count(l):
  c = 0
  for x in l:
    c += 1
  if c > 0:
      return 1
  else:
    return 0  
    
    df3['link'] = df3.apply(lambda row: count(row['URL']), axis=1)
df3['length'] = df3.apply(lambda row: url_length(row['URL']), axis=1)
df3['phishtank'] = df3.apply(lambda row: phishtank_check(row['URL']), axis=1)
df3['domain'] = df3.apply(lambda row: domain_check(row['URL']), axis=1)
df3['ip_address'] = df3.apply(lambda row: ip_check(row['URL']), axis=1)
df3['attherate'] = df3.apply(lambda row: url_character_check(row['URL']), axis=1)
df3['form_tag'] = df3.apply(lambda row: form_tag_check(row['URL']), axis=1)
